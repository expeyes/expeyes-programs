'use strict';
Blockly.Msg["variables_get_dynamic"] = "";
Blockly.Msg["variables_set_dynamic"] = "";
Blockly.Msg["variables_get"] = "";
Blockly.Msg["variables_set"] = "";
Blockly.Msg["text"] = "";
Blockly.Msg["text_multiline"] = "";
Blockly.Msg["text_join"] = "";
Blockly.Msg["text_create_join_container"] = "";
Blockly.Msg["text_create_join_item"] = "";
Blockly.Msg["text_append"] = "";
Blockly.Msg["text_length"] = "";
Blockly.Msg["text_isEmpty"] = "";
Blockly.Msg["text_indexOf"] = "";
Blockly.Msg["text_charAt"] = "";
Blockly.Msg["text_getSubstring"] = "";
Blockly.Msg["text_changeCase"] = "";
Blockly.Msg["text_trim"] = "";
Blockly.Msg["text_print"] = "";
Blockly.Msg["text_prompt_ext"] = "";
Blockly.Msg["text_prompt"] = "";
Blockly.Msg["text_count"] = "";
Blockly.Msg["text_replace"] = "";
Blockly.Msg["text_reverse"] = "";
Blockly.Msg["procedures_defnoreturn"] = "";
Blockly.Msg["procedures_defreturn"] = "";
Blockly.Msg["procedures_mutatorcontainer"] = "";
Blockly.Msg["procedures_mutatorarg"] = "";
Blockly.Msg["procedures_callnoreturn"] = "";
Blockly.Msg["procedures_callreturn"] = "";
Blockly.Msg["procedures_ifreturn"] = "";
Blockly.Msg["math_number"] = "";
Blockly.Msg["math_arithmetic"] = "";
Blockly.Msg["math_single"] = "";
Blockly.Msg["math_trig"] = "";
Blockly.Msg["math_constant"] = "";
Blockly.Msg["math_number_property"] = "";
Blockly.Msg["math_change"] = "";
Blockly.Msg["math_round"] = "";
Blockly.Msg["math_on_list"] = "";
Blockly.Msg["math_modulo"] = "";
Blockly.Msg["math_constrain"] = "";
Blockly.Msg["math_random_int"] = "";
Blockly.Msg["math_random_float"] = "";
Blockly.Msg["math_atan2"] = "";
Blockly.Msg["controls_repeat_ext"] = "";
Blockly.Msg["controls_repeat"] = "";
Blockly.Msg["controls_whileUntil"] = "Block for implementing an infinite loop";
Blockly.Msg["controls_for"] = "";
Blockly.Msg["controls_forEach"] = "";
Blockly.Msg["controls_flow_statements"] = "";
Blockly.Msg["logic_boolean"] = "";
Blockly.Msg["controls_if"] = "Logical IF statement";
Blockly.Msg["controls_ifelse"] = "";
Blockly.Msg["logic_compare"] = "";
Blockly.Msg["logic_operation"] = "";
Blockly.Msg["logic_negate"] = "";
Blockly.Msg["logic_null"] = "";
Blockly.Msg["logic_ternary"] = "";
Blockly.Msg["controls_if_if"] = "";
Blockly.Msg["controls_if_elseif"] = "";
Blockly.Msg["controls_if_else"] = "";
Blockly.Msg["lists_create_empty"] = "";
Blockly.Msg["lists_repeat"] = "";
Blockly.Msg["lists_reverse"] = "";
Blockly.Msg["lists_isEmpty"] = "";
Blockly.Msg["lists_length"] = "";
Blockly.Msg["lists_create_with"] = "";
Blockly.Msg["lists_create_with_container"] = "";
Blockly.Msg["lists_create_with_item"] = "";
Blockly.Msg["lists_indexOf"] = "";
Blockly.Msg["lists_getIndex"] = "";
Blockly.Msg["lists_setIndex"] = "";
Blockly.Msg["lists_getSublist"] = "";
Blockly.Msg["lists_sort"] = "";
Blockly.Msg["lists_split"] = "";
Blockly.Msg["colour_picker"] = "";
Blockly.Msg["colour_random"] = "";
Blockly.Msg["colour_rgb"] = "";
Blockly.Msg["colour_blend"] = "";
Blockly.Msg["cs_start_audio"] = "";
Blockly.Msg["cs_start_audio_listen"] = "";
Blockly.Msg["cs_start_timer"] = "Start A stopwatch with mS resolution";
Blockly.Msg["cs_get_timer"] = "Read the stopwatch's current value.<br><br>You need to start a stopwatch first";
Blockly.Msg["get_phone_accel"] = "Measure the phone's accelerometer values in 3 axes";
Blockly.Msg["get_phone_rotation"] = "Measure the phone's rotation values in 3 axes. Most android phones measure this using a combination of the accelerometer and the magnetometer";
Blockly.Msg["get_phone_light"] = "Measure light intensity falling on the phone's luminosity sensor. This sensor is usually located adjacent to the front camera";
Blockly.Msg["wait_seconds"] = "Pause the program for the specified number of seconds.";
Blockly.Msg["write_to_file"] = "Write data to a file.";
Blockly.Msg["average_array"] = "Calculate the average of a list";
Blockly.Msg["sum_array"] = "Calculate the sum of a list";
Blockly.Msg["sine_fit_arrays"] = "Fit a set of X(Time) and Y(Amplitude) datapoints to a standard sine function and extract the frequency/amplitude/phase";
Blockly.Msg["sine_fit_two_arrays"] = "Fit two sets of X(Time) and Y1(Amplitude),Y2(amplitude of signal 2) datapoints to a standard sine function and extract the frequency ratio/amplitude ratio/phase difference";
Blockly.Msg["fourier_transform"] = "Calculate the fourier transform using Columbia FFT algorithm";
Blockly.Msg["lists_push"] = "Add an item to a list";
Blockly.Msg["lists_push_time"] = "Add an item to a list along with a timestamp";
Blockly.Msg["lists_new"] = "Create a new list";
Blockly.Msg["lists_subtract"] = "Calculate the difference between two lists. Both lists must have the same size. List A is assigned the new value";
Blockly.Msg["lists_subtract_return"] = "Subtract 2 lists and return the value";
Blockly.Msg["save_lists"] = "Save lists into a file";
Blockly.Msg["cs_print"] = "";
Blockly.Msg["cs_sticker"] = "Display a variable's value at the same location in the output screen in the form of a sticker";
Blockly.Msg["cs_search"] = "";
Blockly.Msg["cs_gauge"] = "An analog gauge";
Blockly.Msg["add_game"] = "Add a bird game";
Blockly.Msg["stop_game"] = "";
Blockly.Msg["set_bird_y"] = "";
Blockly.Msg["add_piano"] = "";
Blockly.Msg["play_piano"] = "";
Blockly.Msg["registerService"] = "";
Blockly.Msg["connectService"] = "";
Blockly.Msg["hasMessage"] = "";
Blockly.Msg["receiveMessage"] = "";
Blockly.Msg["sendMessage"] = "";
Blockly.Msg["set_phone_frequency"] = "Generates an audio output of the specified frequency, using the phone's audio system.<br><br> Tested for frequencies less than 3000 Hz.";
Blockly.Msg["set_phone_frequency_stereo"] = "";
Blockly.Msg["stop_phone_frequency"] = "Stops the frequency output from the phone. Which will also stop automatically after 10 seconds anyway";
Blockly.Msg["get_voltage"] = "Measures the voltage between the selected input and any GND pin.<br><br>For A1 and A2, maximum range +/-16 Volts. For A3 it is +/-3V.";
Blockly.Msg["get_resistance"] = "Measures the Resistance between SEN and Ground. Usable between 100 Ohms and 100 kOhms. ";
Blockly.Msg["get_capacitance"] = "Measures capacitance between IN1 and GND. Connect the capacitor between IN1 and any GND pin. Works from a few pF to 100uF. ";
Blockly.Msg["select_range"] = "Selects the voltage range of A1 or A2. Selected range should be higher than the voltage to be measured, and choosing the correct range ensures maximum resolution without losing any useful information. This call is required for Capture calls.";
Blockly.Msg["set_voltage"] = "Sets the specified DC voltage on PV1 or PV2. Range of PV1 is from -5 to +5 volts. PV2 from -3.3 to +3.3 volts";
Blockly.Msg["select_sine_amp"] = "Sets the amplitude of the sinewave on WG to 3V, 1V or 80mV. Add a 100mS delay after using this";
Blockly.Msg["set_frequency"] = "Sets the frequency of WG, SQ1 or SQ2. WG can be set from 5Hz to 5kHz. Square waves can be set upto 1 MHz but all intermediate values are not possible.<br>Add a one second delay after setting WG";
Blockly.Msg["get_frequency"] = "Measure the frequency of voltage signals applied to the selected input(IN2 or SEN).<br>The Voltage must oscillate between 0V(LOW) and 3.3V/5V(HIGH).<br><br>The time delay between 16 LOW to HIGH transitions is measured in order to estimate the frequency";
Blockly.Msg["multi_r2r"] = "Measures the time interval between 2 rising egdes of a Square wave connected to IN1 or SEN. The number of rising edges to be skipped can be specified.";
Blockly.Msg["singlePinEdges"] = "Measures the time interval between the voltage transitions applied to a digital input (SEN or IN2). Number of cycles between";
Blockly.Msg["singlePinEdgesAction"] = "Measures the time interval between changing a digital output (OD1, SQ1 or SQ2) and a resulting transition on a digital input (SEN or IN2)";
Blockly.Msg["capture1"] = "Capture the voltage waveform applied to (A1,A2,A3,MIC,IN1 or SEN). Number of points to be digitized and the time interval between two samples are specified.<br>For example 500 points with a 5 micro second timegap captures the input voltage for 2.5 milliseconds. By default, the results are stored to the lists named timestamps and data1, the names can be changed.";
Blockly.Msg["capture2"] = "Simultaneously captures two inputs. The first one could be set to A1, A2, A3, SEN, IN1 or MIC. The second one is A2.";
Blockly.Msg["capture4"] = "Simultaneously captures four inputs. The first one could be set to A1, A2, A3, SEN, IN1 or MIC. The remaining are A2, A3 and MIC.";
Blockly.Msg["scope_trigger"] = "Trigger value sets the voltage at which the digitization process starts. The binary value ranges from 0 to 1023 and setting this to 512 implies zero volts for A1, A2 and A3.";
Blockly.Msg["capture1_plot"] = "Capture the voltage waveform on (A1,A2,A3,MIC,IN1 or SEN) and plots it. Number of points to be digitized and the time interval between two samples can be specified.";
Blockly.Msg["capture_action_plot"] = "Capture the voltage waveform on (A1,A2,A3,MIC,IN1 or SEN) and plots it, after performing a level change on OD1.<br> Number of points to be digitized and the time interval between two samples can be specified.";
Blockly.Msg["read_SR04"] = "The SR04 ultrasound echo sensor must be connected as follows.<br>Vcc:5V, Trig:SQ2, Echo:IN2, GND:GND .<br>This can returns the distance (in centimeters) from the SR04 sensor to a level surface placed in front of it.;";
Blockly.Msg["read_HX711"] = "";
Blockly.Msg["read_VOLTS"] = "";
Blockly.Msg["set_state"] = "Sets the voltage level on outputs OD1, SQ1 or SQ2. The square wave generators can act as digital outputs.";
Blockly.Msg["set_servo"] = "";
Blockly.Msg["generic_slider"] = "";
Blockly.Msg["generic_slider_value"] = "";
Blockly.Msg["set_frequency_slider"] = "Creates a Slider widget to control the frequency of WG, SQ1 or SQ2. The upper and lower values can be specified.";
Blockly.Msg["set_voltage_slider"] = "Creates a Slider widget to control the voltage at PV1 or PV2";
Blockly.Msg["scanI2C"] = "";
Blockly.Msg["scanI2CString"] = "";
Blockly.Msg["scanI2Cselector"] = "";
Blockly.Msg["read_I2C_sensor"] = "";
Blockly.Msg["read_i2c_sensor_flexible"] = "";
Blockly.Msg["read_i2c_sensor_flexible_dynamic"] = "Press the SCAN I2C button to generate a list of connected devices, based on their ID numbers. You need to choose the correct one. The parameter to be measured also may be selected. If you exactly know which I2C sensor is connected then use the block for that sensor";
Blockly.Msg["read_i2c_sensor_flexible_dynamic_array"] = "Pressing the SCAN I2C button (while building the code0 generate a list of connected devices, based on their ID numbers. You need to choose the correct one. If you exactly know which I2C sensor is connected then use the block for that sensor";
Blockly.Msg["read_BMP280"] = "Pressure sensor with I2C interface";
Blockly.Msg["read_MS5611"] = "Pressure sensor with I2C interface";
Blockly.Msg["read_TSL2561"] = "Luminosity Sensor with I2C interface";
Blockly.Msg["read_TSL2591"] = "Luminosity Sensor with I2C interface";
Blockly.Msg["read_MAX30100"] = "Pulse Oximeter heartrate sensor with I2C interface.";
Blockly.Msg["read_MAX6675"] = "Thermocouple module with I2C interface.";
Blockly.Msg["read_MPU6050"] = "Six axis Accelerometer/Gyroscope module with I2C interface.";
Blockly.Msg["read_VL53L0X"] = "Distance measurement using LIDAR, I2C module.";
Blockly.Msg["read_ML8511"] = "Ultraviolet light measurement module, I2C.";
Blockly.Msg["read_TCS34725"] = "RGB color sensor module, I2C.";
Blockly.Msg["read_INA219"] = "High side current measurement module, I2C.";
Blockly.Msg["read_ADS1115"] = "four channel 16bit ADC module, I2C.";
Blockly.Msg["read_HMC5883L"] = "Triple axis magnetometer, I2C.";
Blockly.Msg["read_QMC5883L"] = "3-axix magnetc filed sensor module, I2C";
Blockly.Msg["set_PCA9685"] = "16 channel 12bit servo motor driver module, I2C";
Blockly.Msg["set_AD9833"] = "programmable Sine wave generator module, I2C.";
Blockly.Msg["plot_datapoint"] = "";
Blockly.Msg["plot_datapoints"] = "";
Blockly.Msg["plot_scale"] = "";
Blockly.Msg["plot_scale_x"] = "";
Blockly.Msg["plot_scale_y"] = "";
Blockly.Msg["plot_xyarray"] = "Plots a graph, X and Y coordinates are provided as two lists";
Blockly.Msg["plot_xyyarray"] = "Plots two graphs from three sets of data points. First one for X-axis of both the graphs.";
Blockly.Msg["plot_xyyyarray"] = "Plots two graphs from four sets of data points. First one for X-axis of all the three graphs.";
Blockly.Msg["plot_xy"] = "Plots a point using the X and Y coordinates provided.";
Blockly.Msg["plot_radar"] = "";
Blockly.Msg["start_camera"] = "";
Blockly.Msg["choose_blob_shade"] = "";
Blockly.Msg["get_frame"] = "";
Blockly.Msg["to_gray"] = "";
Blockly.Msg["subtract_bg"] = "";
Blockly.Msg["cv_subtract"] = "";
Blockly.Msg["get_blobs"] = "";
Blockly.Msg["get_biggest_circle"] = "";
Blockly.Msg["get_lines"] = "";